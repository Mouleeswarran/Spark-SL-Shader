const float pixSize = 35.0;

//luminance
float lum(in vec4 pix) { return dot(pix.rgb,vec3(0.3,0.59,0.11));}

vec4 mainImage( std::Texture2d myTex) {
     vec2 iResolution = std::getRenderTargetSize();
    //vec2 fragCoord = fragment(std::getFragmentCoord().xy);
    vec2 fragCoord = fragment(std::getRenderTargetSize() * std::getVertexTexCoord());
    vec4 fragColor; 
    vec2 div = iResolution.xy/pixSize;

    vec2 uv = fragCoord.xy/iResolution.xy;
    vec2 uv2 = floor(uv*div)/div;
    
    vec2 diff = (uv-uv2)*div;
    
    vec4 pix = myTex.sample(uv2);
    
    if ( pow(diff.x - 0.5,2.0) + pow(diff.y - 0.5,2.0) > 0.25) {
        
        vec4 pmax;
        vec4 pmin;
        vec2 v2 = pixSize/iResolution.xy;

        if (diff.x<0.5) { v2.x = -v2.x; }
        if (diff.y<0.5) { v2.y = -v2.y; }

        vec4 p1  = myTex.sample(uv2 + vec2( 0.0, v2.y ));
        vec4 p2  = myTex.sample( uv2 + vec2( v2.x, 0.0 ));
        vec4 p3  = myTex.sample( uv2 + vec2( v2.x, v2.y ));

        if ( lum(p1) > lum(p2) ) {
            pmax = p1;
            pmin = p2;
        } else {
            pmax = p2;
            pmin = p1;
        }

        if ( lum(p3) < lum(pmin) ) {
            pmin = p3;
        }

        if ( lum(pix) > lum(pmax) ) {
            pix = pmax;
        } else if ( lum(pmin) > lum(pix) ) {
            pix = pmin;
        }        
        
    }
    
    fragColor = pix;
    return fragColor;
}