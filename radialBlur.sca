// A simplified version of: https://www.shadertoy.com/view/4sfGRn

const float amount = 100.0;
const vec2 start_pos = vec2(-0.25, -0.25); // -1.0 to 1.0 for x, y

vec4 deform(  vec2 p, std::Texture2d myTex )
{
    vec2 uv;
    uv.x = sin( 0.0 + 1.0 ) + p.x;
    uv.y = sin( 0.0 + 1.0 ) + p.y;
    return myTex.sample( uv * 0.65 ).rgba;
}

vec4 mainImage( std::Texture2d myTex)
{
     vec2 iResolution = std::getRenderTargetSize();
    	 vec2 fragCoord = fragment(floor(std::getRenderTargetSize() * std::getVertexTexCoord()));
   	 vec4 fragColor; 
    vec2 position = -1.0 + 2.0 * fragCoord.xy / iResolution.xy;
    vec2 current_step = position;
    
    vec2 direction = ( start_pos - position ) / amount; 
    
    vec4 total = vec4(vec3(0.0),1.0);
    for( int i = 0; i < int( amount ); i++ )
    {
        vec4 result = deform( current_step , myTex);
        result = smoothstep( 0.0, 1.0, result );
        total += result;
        current_step += direction;
    }
    
    total /= amount;
    fragColor = total;
    return fragColor;
}